{"version":3,"sources":["Recipe.jsx","CreateRecipeInput.jsx","recipesGateway.jsx","RecipesList.jsx","CookBook.jsx","App.jsx","index.js"],"names":["Recipe","id","name","image","ingredients","createdAt","onDelete","onEdit","story","useState","edit","changeEdit","showStory","handleStory","form","setForm","updatedForm","handleText","e","target","value","console","log","listArray","split","className","src","alt","map","word","key","length","moment","format","onClick","onSubmit","preventDefault","editSumbit","defaultValue","onChange","event","placeholder","recipe","undefined","updated","defaultFormState","CreateRecipeInput","props","createEventObj","Object","values","state","some","el","onCreate","clearForm","hidePopup","showCreate","inputHandler","setState","this","type","Component","baseUrl","updateRecipe","recipeId","recipeData","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","RecipesList","fetchRecipes","json","recipesList","recipes","showInfo","newRecipe","Date","push","handleRecipeDelete","filterObj","find","sortedList","slice","sort","a","b","CookBook","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a26a69a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst Recipe = ({\r\n    id,\r\n    name,\r\n    image,\r\n    ingredients,\r\n    createdAt,\r\n    onDelete,\r\n    onEdit,\r\n    story,\r\n}) => {\r\n    const [edit, changeEdit] = useState(false);\r\n    const [showStory, handleStory] = useState(false);\r\n    const [form, setForm] = useState({});\r\n    const [info, showInfo] = useState(false)\r\n\r\n    \r\n\r\n    const updatedForm = {\r\n        name: name,\r\n        ingredients: ingredients,\r\n        image: image,\r\n    };\r\n\r\n    const handleText = (e) => {\r\n        const { name, value } = e.target;\r\n        console.log(\"value: \", value);\r\n        console.log(\"form: \", form);\r\n        console.log(\"updatedForm: \", updatedForm);\r\n\r\n        setForm({\r\n            ...updatedForm,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    const editSumbit = (e, id) => {\r\n        e.preventDefault();\r\n        onEdit(form, id);\r\n        changeEdit(!edit);\r\n    };\r\n\r\n    const listArray = ingredients.split(\",\");\r\n\r\n    return (\r\n        <>\r\n            <div className=\"recipe-info\">\r\n                <div className=\"recipe-info__image-container\">\r\n                    <img\r\n                        className=\"recipe-info__image-container_image\"\r\n                        src={\r\n                            image === \"\"\r\n                                ? \"https://wallpaperaccess.com/full/271679.jpg\"\r\n                                : image\r\n                        }\r\n                        alt=\"food\"\r\n                    />\r\n                </div>\r\n                <div className=\"recipe-info__description\">\r\n                    <h4 className=\"recipe-info__description_title\">\r\n                        Ingredients\r\n                    </h4>\r\n                    <div className=\"recipe-info__description_ingredients\">\r\n                        {listArray.map((word) => (\r\n                            <li key={word}>{word}</li>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"recipe-info__description_date-btns\">\r\n                        <div className=\"recipe-info__description_date\">\r\n                            {story.length <= 1\r\n                                ? `Created: ${moment(createdAt).format(\r\n                                      \"D-MM-YYYY, H:mm\"\r\n                                  )}`\r\n                                : `Updated: ${moment(createdAt).format(\r\n                                      \"D-MM-YYYY, H:mm\"\r\n                                  )}`}\r\n                        </div>\r\n                        <div className=\"recipe-info__description__btns\">\r\n                            <button\r\n                                className={edit ? \"recipe-info__description__btns_edit active\" : \"recipe-info__description__btns_edit\"}\r\n                                onClick={() => changeEdit(!edit)}\r\n                            >\r\n                                Edit\r\n                            </button>\r\n                            <button\r\n                                className=\"recipe-info__description__btns_delete\"\r\n                                onClick={() => onDelete(id)}\r\n                            >\r\n                                Delete\r\n                            </button>\r\n                            <button\r\n                                className={\r\n                                    showStory\r\n                                        ? \"recipe-info__description__btns_story active\"\r\n                                        : \"recipe-info__description__btns_story\"\r\n                                }\r\n                                onClick={() => handleStory(!showStory)}\r\n                            >\r\n                                {showStory ? \"Hide story\" : \"Show story\"}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {edit && (\r\n                <div className=\"edit-form\">\r\n                    <form onSubmit={(e) => editSumbit(e, id)}>\r\n                        <div className=\"edit-form__item\">\r\n                            <div className=\"edit-form__text\">Name</div>\r\n                            <input\r\n                                name=\"name\"\r\n                                defaultValue={name}\r\n                                onChange={(event) => handleText(event)}\r\n                                placeholder=\"Write the name of your dish\"\r\n                                className=\"edit-form__input\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"edit-form__item\">\r\n                            <div className=\"edit-form__text\">\r\n                                {\"Ingredients ( put commas to get a list :) )\"}\r\n                            </div>\r\n                            <input\r\n                                name=\"ingredients\"\r\n                                defaultValue={ingredients}\r\n                                onChange={(event) => handleText(event)}\r\n                                placeholder=\"Write some ingredients\"\r\n                                className=\"edit-form__input\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"edit-form__item\">\r\n                            <div className=\"edit-form__text\">Image</div>\r\n\r\n                            <input\r\n                                name=\"image\"\r\n                                defaultValue={image}\r\n                                onChange={(event) => handleText(event)}\r\n                                placeholder=\"Enter image URL of your dish (or our standard picture will be here)\"\r\n                                className=\"edit-form__input\"\r\n                            />\r\n                        </div>\r\n                        <button className=\"waves-effect waves-light btn edit-btn\">\r\n                            Save changes\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n            {showStory && (\r\n                <div className=\"story-container\">\r\n                    {story.map((recipe) => (\r\n                        <div className=\"story-card\">\r\n                            <div className=\"story-card__item\">\r\n                                Name: {recipe.name}\r\n                            </div>\r\n                            <div className=\"story-card__item\">\r\n                                Ingredients: {recipe.ingredients}\r\n                            </div>\r\n                            <div className=\"story-card__item\">\r\n                                Image: {recipe.image}\r\n                            </div>\r\n                            <div className=\"story-card__date\">\r\n                                {recipe.updated === undefined\r\n                                    ? `Created ${recipe.createdAt}`\r\n                                    : `Updated ${recipe.updated}`}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Recipe;","import React, { Component } from \"react\";\r\n\r\nconst defaultFormState = {\r\n    name: \"Dish without title (edit and add title)\",\r\n    ingredients: \"Dish without ingredients, (edit and add some ingredients)\",\r\n    image: \"https://wallpaperaccess.com/full/271679.jpg\",\r\n};\r\n\r\nclass CreateRecipeInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            form: defaultFormState,\r\n        };\r\n    }\r\n\r\n    createEventObj = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (Object.values(this.state.form).some((el) => el === \"\")) {\r\n            console.log(\"no values\");\r\n            return;\r\n        }\r\n\r\n        this.props.onCreate(this.state.form);\r\n        this.clearForm(); // try to commit\r\n        this.hidePopup();\r\n    };\r\n\r\n    hidePopup = () => {\r\n        this.props.showCreate();\r\n    };\r\n\r\n    inputHandler = (e) => {\r\n        const { name, value } = e.target;\r\n\r\n        this.setState({\r\n            form: {\r\n                ...this.state.form,\r\n                [name]: value,\r\n            },\r\n        });\r\n    };\r\n\r\n    clearForm = () => {\r\n        this.setState({\r\n            form: defaultFormState,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"recipe-modal\">\r\n                <div className=\"recipe-modal__content\">\r\n                    <div className=\"create-event\">\r\n                        <form\r\n                            className=\"event-form\"\r\n                            // onSubmit={this.createEventObj}\r\n                        >\r\n                            <div className=\"event-form__container\">\r\n                                <div className=\"event-form__item\">\r\n                                    Name{\" \"}\r\n                                    <input\r\n                                        onChange={this.inputHandler}\r\n                                        type=\"text\"\r\n                                        className=\"event-form__item_input\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Wtite the name of your dish\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"event-form__item\">\r\n                                    {\r\n                                        \"Ingredients ( put commas to get a list :) )\"\r\n                                    }\r\n\r\n                                    <input\r\n                                        onChange={this.inputHandler}\r\n                                        name=\"ingredients\"\r\n                                        placeholder=\"Write some ingredients\"\r\n                                        className=\"event-form__item_input\"\r\n                                        type=\"text\"\r\n                                    ></input>\r\n                                </div>\r\n                                <div className=\"event-form__item\">\r\n                                    Image\r\n                                    <input\r\n                                        onChange={this.inputHandler}\r\n                                        type=\"text\"\r\n                                        name=\"image\"\r\n                                        className=\"event-form__item_input\"\r\n                                        placeholder=\"Enter image URL of your dish (or our standard picture will be here)\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"waves-effect waves-light btn\"\r\n                            onClick={this.createEventObj}\r\n                        >\r\n                            Save\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateRecipeInput;\r\n","const baseUrl = \"https://5e97f8bc77f5430016339cb5.mockapi.io/api/v1/recipes\";\r\n\r\nexport const createRecipe = recipeData => {\r\n    return fetch(baseUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-type\": \"application/json;charset=utf-8\",\r\n        },\r\n        body: JSON.stringify(recipeData),\r\n    })\r\n    .then(response => {\r\n        if(!response.ok) \r\n            throw new Error('Failed to create recipe');\r\n    });\r\n};\r\n\r\nexport const fetchRecipesList = () => {\r\n    return fetch(baseUrl)\r\n        .then(response => {\r\n            if(response.ok)\r\n                return response.json();\r\n        })\r\n        .then(recipesList => recipesList);\r\n};\r\n\r\nexport const updateRecipe = (recipeId, recipeData) => {\r\n    console.log(recipeData);\r\n    \r\n    return fetch(`${baseUrl}/${recipeId}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n            \"Content-type\": \"application/json;charset=utf-8\",\r\n        },\r\n        body: JSON.stringify(recipeData),\r\n    })\r\n    .then(response => {\r\n        if (!response.ok)\r\n            throw new Error('Failed to change status of recipe');\r\n    });\r\n};\r\n\r\nexport const deleteRecipe = (recipeId) => {\r\n    return fetch(`${baseUrl}/${recipeId}`, {\r\n        method: \"DELETE\"\r\n    })\r\n    .then(response => {\r\n        if(!response.ok) \r\n            throw new Error('Failed to delete recipe');\r\n    });\r\n};","import React, { Component } from \"react\";\r\nimport Recipe from \"./Recipe\";\r\nimport CreateRecipeInput from \"./CreateRecipeInput\";\r\nimport {\r\n    createRecipe,\r\n    fetchRecipesList,\r\n    updateRecipe,\r\n    deleteRecipe,\r\n} from \"./recipesGateway\";\r\nimport moment from \"moment\";\r\n\r\nclass RecipesList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            recipes: [],\r\n            showCreate: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchRecipes();\r\n    }\r\n\r\n    fetchRecipes = () => {\r\n        fetchRecipesList().then((recipesList) => {\r\n            this.setState({\r\n                recipes: recipesList,\r\n            });\r\n        });\r\n    };\r\n\r\n    showCreate = () => {\r\n        this.setState({\r\n            showCreate: !this.state.showCreate,\r\n        });\r\n    };\r\n\r\n    showInfo = (recipe) => {\r\n        const newRecipe = {\r\n            showInfo: !recipe.showInfo,\r\n        };\r\n        updateRecipe(recipe.id, newRecipe).then(() => this.fetchRecipes());\r\n    };\r\n\r\n    onCreate = (form) => {\r\n        const newRecipe = {\r\n            name: form.name,\r\n            ingredients: form.ingredients,\r\n            image: form.image,\r\n            createdAt: new Date(),\r\n            story: [],\r\n            showInfo: false,\r\n        };\r\n\r\n        newRecipe.story.push({\r\n            name: newRecipe.name,\r\n            ingredients: newRecipe.ingredients,\r\n            image: newRecipe.image,\r\n            createdAt: moment(newRecipe.createdAt).format(\"D-MM-YYYY, H:mm\"),\r\n        });\r\n        createRecipe(newRecipe).then(() => this.fetchRecipes());\r\n    };\r\n\r\n    handleRecipeDelete = (id) => {\r\n        deleteRecipe(id).then(() => this.fetchRecipes());\r\n    };\r\n\r\n    onEdit = (form, id) => {\r\n        const filterObj = this.state.recipes.find((recipe) => recipe.id === id);\r\n        filterObj.createdAt = new Date();\r\n        filterObj.name = form.name;\r\n        filterObj.ingredients = form.ingredients;\r\n        filterObj.image = form.image;\r\n\r\n        filterObj.story.push({\r\n            updated: moment(filterObj.createdAt).format(\"D-MM-YYYY, H:mm\"),\r\n            name: form.name,\r\n            ingredients: form.ingredients,\r\n            image: form.image,\r\n        });\r\n\r\n        updateRecipe(id, filterObj).then(() => this.fetchRecipes());\r\n    };\r\n\r\n    render() {\r\n        const sortedList = this.state.recipes\r\n            .slice()\r\n            .sort((a, b) => a.createdAt - b.createdAt);\r\n\r\n        return (\r\n            <>\r\n                <div className=\"todo-list\">\r\n                    <button\r\n                        className=\"waves-effect waves-light create-btn\"\r\n                        onClick={this.showCreate}\r\n                    >\r\n                        Create recipe\r\n                    </button>\r\n                    {this.state.showCreate && (\r\n                        <CreateRecipeInput\r\n                            onCreate={this.onCreate}\r\n                            showCreate={this.showCreate}\r\n                        />\r\n                    )}\r\n                    <ul className=\"list\">\r\n                        {sortedList.map((recipe) => {\r\n                            return (\r\n                                <>\r\n                                    <div className=\"card-background\">\r\n                                        <li\r\n                                            key={recipe.id}\r\n                                            className=\"list-item\"\r\n                                            onClick={() =>\r\n                                                this.showInfo(recipe)\r\n                                            }\r\n                                        >\r\n                                            <span className=\"list-item__text\">\r\n                                                {recipe.name}\r\n                                            </span>\r\n                                        </li>\r\n                                        {recipe.showInfo && (\r\n                                            <Recipe\r\n                                                key={recipe.id}\r\n                                                {...recipe}\r\n                                                recipe={recipe}\r\n                                                onDelete={\r\n                                                    this.handleRecipeDelete\r\n                                                }\r\n                                                onEdit={this.onEdit}\r\n                                            />\r\n                                        )}\r\n                                    </div>\r\n                                </>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default RecipesList;\r\n","import React from 'react';\r\nimport RecipesList from './RecipesList';\r\n\r\nconst CookBook = () =>\r\n    (\r\n        <>\r\n            <h1 className=\"title\">CookBook</h1>\r\n            <RecipesList /> \r\n        </>    \r\n    );\r\nexport default CookBook;","import React from 'react';\r\nimport CookBook from './CookBook';\r\n\r\nconst App = () => \r\n    (<CookBook />);\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}